<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="us.luckylu.dev.dao.mapper.OutRoomMapper">
  <resultMap id="BaseResultMap" type="us.luckylu.dev.model.OutRoom">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="open_id" jdbcType="INTEGER" property="openId" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="room_amount" jdbcType="DECIMAL" property="roomAmount" />
    <result column="fine_amount" jdbcType="DECIMAL" property="fineAmount" />
    <result column="pay_method" jdbcType="VARCHAR" property="payMethod" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, open_id, create_at, room_amount, fine_amount, pay_method
  </sql>
  <select id="selectByExample" parameterType="us.luckylu.dev.model.OutRoomExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from out_room
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from out_room
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from out_room
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="us.luckylu.dev.model.OutRoomExample">
    delete from out_room
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="us.luckylu.dev.model.OutRoom">
    insert into out_room (id, open_id, create_at, 
      room_amount, fine_amount, pay_method
      )
    values (#{id,jdbcType=INTEGER}, #{openId,jdbcType=INTEGER}, #{createAt,jdbcType=TIMESTAMP}, 
      #{roomAmount,jdbcType=DECIMAL}, #{fineAmount,jdbcType=DECIMAL}, #{payMethod,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="us.luckylu.dev.model.OutRoom">
    insert into out_room
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="roomAmount != null">
        room_amount,
      </if>
      <if test="fineAmount != null">
        fine_amount,
      </if>
      <if test="payMethod != null">
        pay_method,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="openId != null">
        #{openId,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="roomAmount != null">
        #{roomAmount,jdbcType=DECIMAL},
      </if>
      <if test="fineAmount != null">
        #{fineAmount,jdbcType=DECIMAL},
      </if>
      <if test="payMethod != null">
        #{payMethod,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="us.luckylu.dev.model.OutRoomExample" resultType="java.lang.Long">
    select count(*) from out_room
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update out_room
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.openId != null">
        open_id = #{record.openId,jdbcType=INTEGER},
      </if>
      <if test="record.createAt != null">
        create_at = #{record.createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.roomAmount != null">
        room_amount = #{record.roomAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.fineAmount != null">
        fine_amount = #{record.fineAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.payMethod != null">
        pay_method = #{record.payMethod,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update out_room
    set id = #{record.id,jdbcType=INTEGER},
      open_id = #{record.openId,jdbcType=INTEGER},
      create_at = #{record.createAt,jdbcType=TIMESTAMP},
      room_amount = #{record.roomAmount,jdbcType=DECIMAL},
      fine_amount = #{record.fineAmount,jdbcType=DECIMAL},
      pay_method = #{record.payMethod,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="us.luckylu.dev.model.OutRoom">
    update out_room
    <set>
      <if test="openId != null">
        open_id = #{openId,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="roomAmount != null">
        room_amount = #{roomAmount,jdbcType=DECIMAL},
      </if>
      <if test="fineAmount != null">
        fine_amount = #{fineAmount,jdbcType=DECIMAL},
      </if>
      <if test="payMethod != null">
        pay_method = #{payMethod,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="us.luckylu.dev.model.OutRoom">
    update out_room
    set open_id = #{openId,jdbcType=INTEGER},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      room_amount = #{roomAmount,jdbcType=DECIMAL},
      fine_amount = #{fineAmount,jdbcType=DECIMAL},
      pay_method = #{payMethod,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>