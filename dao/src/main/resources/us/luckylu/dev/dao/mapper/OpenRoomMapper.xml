<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="us.luckylu.dev.dao.mapper.OpenRoomMapper">
  <resultMap id="BaseResultMap" type="us.luckylu.dev.model.OpenRoom">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="room_id" jdbcType="INTEGER" property="roomId" />
    <result column="expe_arrivetime" jdbcType="TIMESTAMP" property="expeArrivetime" />
    <result column="expe_leavetime" jdbcType="TIMESTAMP" property="expeLeavetime" />
    <result column="deposit" jdbcType="DOUBLE" property="deposit" />
    <result column="extend_days" jdbcType="INTEGER" property="extendDays" />
    <result column="overdue_status" jdbcType="INTEGER" property="overdueStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, type, status, create_at, user_id, room_id, expe_arrivetime, expe_leavetime, deposit, 
    extend_days, overdue_status
  </sql>
  <select id="selectByExample" parameterType="us.luckylu.dev.model.OpenRoomExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from open_room
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from open_room
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from open_room
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="us.luckylu.dev.model.OpenRoomExample">
    delete from open_room
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="us.luckylu.dev.model.OpenRoom">
    insert into open_room (id, type, status, 
      create_at, user_id, room_id, 
      expe_arrivetime, expe_leavetime, deposit, 
      extend_days, overdue_status)
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{createAt,jdbcType=TIMESTAMP}, #{userId,jdbcType=INTEGER}, #{roomId,jdbcType=INTEGER}, 
      #{expeArrivetime,jdbcType=TIMESTAMP}, #{expeLeavetime,jdbcType=TIMESTAMP}, #{deposit,jdbcType=DOUBLE}, 
      #{extendDays,jdbcType=INTEGER}, #{overdueStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="us.luckylu.dev.model.OpenRoom">
    insert into open_room
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="roomId != null">
        room_id,
      </if>
      <if test="expeArrivetime != null">
        expe_arrivetime,
      </if>
      <if test="expeLeavetime != null">
        expe_leavetime,
      </if>
      <if test="deposit != null">
        deposit,
      </if>
      <if test="extendDays != null">
        extend_days,
      </if>
      <if test="overdueStatus != null">
        overdue_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roomId != null">
        #{roomId,jdbcType=INTEGER},
      </if>
      <if test="expeArrivetime != null">
        #{expeArrivetime,jdbcType=TIMESTAMP},
      </if>
      <if test="expeLeavetime != null">
        #{expeLeavetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deposit != null">
        #{deposit,jdbcType=DOUBLE},
      </if>
      <if test="extendDays != null">
        #{extendDays,jdbcType=INTEGER},
      </if>
      <if test="overdueStatus != null">
        #{overdueStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="us.luckylu.dev.model.OpenRoomExample" resultType="java.lang.Long">
    select count(*) from open_room
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update open_room
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createAt != null">
        create_at = #{record.createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.roomId != null">
        room_id = #{record.roomId,jdbcType=INTEGER},
      </if>
      <if test="record.expeArrivetime != null">
        expe_arrivetime = #{record.expeArrivetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expeLeavetime != null">
        expe_leavetime = #{record.expeLeavetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deposit != null">
        deposit = #{record.deposit,jdbcType=DOUBLE},
      </if>
      <if test="record.extendDays != null">
        extend_days = #{record.extendDays,jdbcType=INTEGER},
      </if>
      <if test="record.overdueStatus != null">
        overdue_status = #{record.overdueStatus,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update open_room
    set id = #{record.id,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_at = #{record.createAt,jdbcType=TIMESTAMP},
      user_id = #{record.userId,jdbcType=INTEGER},
      room_id = #{record.roomId,jdbcType=INTEGER},
      expe_arrivetime = #{record.expeArrivetime,jdbcType=TIMESTAMP},
      expe_leavetime = #{record.expeLeavetime,jdbcType=TIMESTAMP},
      deposit = #{record.deposit,jdbcType=DOUBLE},
      extend_days = #{record.extendDays,jdbcType=INTEGER},
      overdue_status = #{record.overdueStatus,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="us.luckylu.dev.model.OpenRoom">
    update open_room
    <set>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="roomId != null">
        room_id = #{roomId,jdbcType=INTEGER},
      </if>
      <if test="expeArrivetime != null">
        expe_arrivetime = #{expeArrivetime,jdbcType=TIMESTAMP},
      </if>
      <if test="expeLeavetime != null">
        expe_leavetime = #{expeLeavetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deposit != null">
        deposit = #{deposit,jdbcType=DOUBLE},
      </if>
      <if test="extendDays != null">
        extend_days = #{extendDays,jdbcType=INTEGER},
      </if>
      <if test="overdueStatus != null">
        overdue_status = #{overdueStatus,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="us.luckylu.dev.model.OpenRoom">
    update open_room
    set type = #{type,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_at = #{createAt,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      room_id = #{roomId,jdbcType=INTEGER},
      expe_arrivetime = #{expeArrivetime,jdbcType=TIMESTAMP},
      expe_leavetime = #{expeLeavetime,jdbcType=TIMESTAMP},
      deposit = #{deposit,jdbcType=DOUBLE},
      extend_days = #{extendDays,jdbcType=INTEGER},
      overdue_status = #{overdueStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>